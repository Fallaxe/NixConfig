(defvar workspace-active 1)  ;; Variabile per tenere traccia del workspace attivo

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button 
            :class {workspace-active == 1 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 1) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=2; hyprctl dispatch workspace 1" 1)
    (button 
            :class {workspace-active == 2 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 2) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=2; hyprctl dispatch workspace 2" 2)
    (button 
            :class {workspace-active == 3 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 3) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=3; hyprctl dispatch workspace 3" 3)
    (button 
            :class {workspace-active == 4 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 4) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=4; hyprctl dispatch workspace 4" 4)
    (button 
            :class {workspace-active == 5 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 5) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=5; hyprctl dispatch workspace 5" 5)
    (button 
            :class {workspace-active == 6 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 6) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=6; hyprctl dispatch workspace 6" 6)
    (button 
            :class {workspace-active == 7 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 7) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=7; hyprctl dispatch workspace 7" 7)
    (button 
            :class {workspace-active == 8 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 8) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=8; hyprctl dispatch workspace 8" 8)
    (button 
            :class {workspace-active == 9 ? "workspace-btn active" : "workspace-btn"}
            ;:class (if(= workspace-active 9) "workspace-btn active" "workspace-btn" )
            :onclick "eww update workspace-active=9; hyprctl dispatch workspace 9" 9)
    )
  )
(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0.2%"
                      :width "90%"
                      :height "10px"
                      :anchor "top center")
  :stacking "fg"
  :reserve (struts :side "top" :distance "4%")
  (bar))